#!/usr/bin/env python3
"""
Telegram Bot —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π MCP —Å–µ—Ä–≤–µ—Ä–∞ –∏ Ollama
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç logic –∏–∑ interactive_chat.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ Telegram
"""

import json
import asyncio
import os
import logging
import requests
from typing import Dict, Any, List, Optional
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ContextTypes, 
    filters
)
from test_client import MCPTestClient

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class OllamaIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Ollama –¥–ª—è tool calling"""
    
    def __init__(self, base_url: str = "http://localhost:11434", model: str = "llama3.2:3b-instruct-q5_K_M"):
        self.base_url = base_url
        self.model = model
    
    def check_ollama_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def chat_with_tools(self, messages: List[Dict], tools: List[Dict]) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Ollama —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
        try:
            payload = {
                "model": self.model,
                "messages": messages,
                "stream": False
            }
            
            if tools:
                payload["tools"] = tools
            
            response = requests.post(
                f"{self.base_url}/api/chat", 
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"HTTP {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"}


class TelegramMCPBot:
    """Telegram Bot —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π MCP —Å–µ—Ä–≤–µ—Ä–∞ –∏ Ollama"""
    
    def __init__(self, token: str):
        self.token = token
        self.mcp_client = MCPTestClient(["python3", "mcp_server.py"])
        self.ollama = OllamaIntegration()
        self.available_tools = []
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.user_conversations = {}
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_debug_mode = {}
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(token).build()
        
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot —Å MCP + Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
        if not self.ollama.check_ollama_availability():
            logger.error("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve")
            return False
        
        logger.info("‚úÖ Ollama –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
        try:
            await self.mcp_client.start_server()
            await self.mcp_client.initialize()
            self.available_tools = await self.mcp_client.list_tools()
            logger.info(f"‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å {len(self.available_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.register_handlers()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP: {e}")
            return False
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.cmd_start))
        self.application.add_handler(CommandHandler("help", self.cmd_help))
        self.application.add_handler(CommandHandler("tools", self.cmd_tools))
        self.application.add_handler(CommandHandler("slots", self.cmd_slots))
        self.application.add_handler(CommandHandler("plan", self.cmd_plan))
        self.application.add_handler(CommandHandler("search", self.cmd_search))
        self.application.add_handler(CommandHandler("history", self.cmd_history))
        self.application.add_handler(CommandHandler("clear", self.cmd_clear))
        self.application.add_handler(CommandHandler("debug", self.cmd_debug))
        self.application.add_handler(CommandHandler("meet", self.cmd_meet))
        
        # Callback query –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    def get_user_conversation(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_conversations:
            self.user_conversations[user_id] = []
        return self.user_conversations[user_id]
    
    def add_to_conversation(self, user_id: int, role: str, content: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        conversation = self.get_user_conversation(user_id)
        conversation.append({"role": role, "content": content})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(conversation) > 20:
            self.user_conversations[user_id] = conversation[-20:]
    
    def is_debug_mode(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_debug_mode.get(user_id, False)
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        welcome_text = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ü–æ–º–æ—â–Ω–∏–∫–∞!**

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚Ä¢ üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–µ—á –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–ª–æ—Ç–æ–≤
‚Ä¢ üìã –ü–æ–∏—Å–∫–æ–º –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º
‚Ä¢ üöÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è
‚Ä¢ üí¨ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/tools - —Å–ø–∏—Å–æ–∫ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
/slots - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
/plan - –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è
/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º
/meet <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É
/history - –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/debug - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! üöÄ"""
        
        # –°–æ–∑–¥–∞–µ–º inline keyboard —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –°–ª–æ—Ç—ã", callback_data="quick_slots"),
                InlineKeyboardButton("üöÄ –ü–ª–∞–Ω", callback_data="quick_plan")
            ],
            [
                InlineKeyboardButton("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="quick_tools"),
                InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="quick_help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text, 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """üìã **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `/tools` - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
‚Ä¢ `/slots` - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
‚Ä¢ `/plan` - –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è
‚Ä¢ `/search <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º
‚Ä¢ `/meet <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É
‚Ä¢ `/history` - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚Ä¢ `/clear` - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
‚Ä¢ `/debug` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/search –æ—Ç–ø—É—Å–∫` - –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—É—Å–∫–∞—Ö
‚Ä¢ `/meet 2024-01-19 14:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π` - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É

**–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏:** {debug_status}

üí¨ **–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!**
–Ø –æ—Ç–≤–µ—á—É –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        
        user_id = update.effective_user.id
        debug_status = "–í–ö–õ–Æ–ß–ï–ù ‚úÖ" if self.is_debug_mode(user_id) else "–í–´–ö–õ–Æ–ß–ï–ù ‚ùå"
        
        await update.message.reply_text(
            help_text.format(debug_status=debug_status),
            parse_mode='Markdown'
        )
    
    async def cmd_tools(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /tools"""
        tools_text = "üîß **–î–û–°–¢–£–ü–ù–´–ï MCP –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:**\n\n"
        for i, tool in enumerate(self.available_tools, 1):
            tools_text += f"{i}. **{tool['name']}**\n   üìù {tool['description']}\n\n"
        
        await update.message.reply_text(tools_text, parse_mode='Markdown')
    
    async def cmd_slots(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /slots"""
        try:
            result = await self.mcp_client.call_tool("get_available_slots")
            data = json.loads(result["content"][0]["text"])
            
            slots_text = "üìÖ **–î–û–°–¢–£–ü–ù–´–ï –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´:**\n\n"
            for slot in data["available_slots"]:
                times = ", ".join(slot['available_times'])
                slots_text += f"**{slot['date']}:** {times}\n"
            
            await update.message.reply_text(slots_text, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤: {e}")
    
    async def cmd_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /plan"""
        try:
            result = await self.mcp_client.call_tool("get_development_plan")
            data = json.loads(result["content"][0]["text"])
            
            plan_text = f"""üöÄ **–ü–õ–ê–ù –†–ê–ó–í–ò–¢–ò–Ø:**

**–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** {data['current_level']}
**–¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:** {data['target_level']}

**–ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:**
"""
            for skill in data["skills_to_develop"]:
                plan_text += f"‚Ä¢ **{skill['skill']}** ({skill['current_level']} ‚Üí {skill['target_level']})\n"
            
            await update.message.reply_text(plan_text, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
    
    async def cmd_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /search"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/search <–∑–∞–ø—Ä–æ—Å>`\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/search –æ—Ç–ø—É—Å–∫`",
                parse_mode='Markdown'
            )
            return
        
        query = " ".join(context.args)
        try:
            result = await self.mcp_client.call_tool("search_regulations", {"query": query})
            data = json.loads(result["content"][0]["text"])
            
            if data.get('results'):
                search_text = f"üîç **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ü–û '{query}':**\n\n"
                for res in data['results']:
                    search_text += f"‚ùì **{res['question']}**\n"
                    search_text += f"üí° {res['answer']}\n\n"
                await update.message.reply_text(search_text, parse_mode='Markdown')
            else:
                await update.message.reply_text(
                    f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –æ—Ç–ø—É—Å–∫, –±–æ–ª—å–Ω–∏—á–Ω—ã–π, –¥—Ä–µ—Å—Å-–∫–æ–¥, —É–¥–∞–ª–µ–Ω–∫–∞"
                )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    async def cmd_meet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /meet"""
        if len(context.args) < 3:
            await update.message.reply_text(
                "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/meet <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ>`\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/meet 2024-01-19 14:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π`",
                parse_mode='Markdown'
            )
            return
        
        date = context.args[0]
        time = context.args[1]
        title = " ".join(context.args[2:])
        
        try:
            result = await self.mcp_client.call_tool("schedule_meeting", {
                "date": date,
                "time": time,
                "title": title
            })
            data = json.loads(result["content"][0]["text"])
            
            if data["success"]:
                await update.message.reply_text(f"‚úÖ {data['message']}")
            else:
                message = f"‚ùå {data['message']}"
                if data.get('available_alternatives'):
                    alternatives = ", ".join(data['available_alternatives'])
                    message += f"\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {alternatives}"
                await update.message.reply_text(message)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def cmd_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /history"""
        user_id = update.effective_user.id
        conversation = self.get_user_conversation(user_id)
        
        if not conversation:
            await update.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—É—Å—Ç–∞")
            return
        
        history_text = "üìú **–ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):**\n\n"
        for i, msg in enumerate(conversation[-10:], 1):
            role_emoji = "üë§" if msg['role'] == 'user' else "ü§ñ"
            content = msg['content'][:100] + "..." if len(msg['content']) > 100 else msg['content']
            history_text += f"{i}. {role_emoji} {content}\n"
        
        await update.message.reply_text(history_text, parse_mode='Markdown')
    
    async def cmd_clear(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /clear"""
        user_id = update.effective_user.id
        self.user_conversations[user_id] = []
        await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
    
    async def cmd_debug(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /debug"""
        user_id = update.effective_user.id
        current_debug = self.is_debug_mode(user_id)
        self.user_debug_mode[user_id] = not current_debug
        
        status = "–í–ö–õ–Æ–ß–ï–ù ‚úÖ" if not current_debug else "–í–´–ö–õ–Æ–ß–ï–ù ‚ùå"
        info = "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∫–∞–∫–∏–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI" if not current_debug else "–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞"
        
        await update.message.reply_text(
            f"üîç **–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏:** {status}\n{info}",
            parse_mode='Markdown'
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "quick_slots":
            await self.cmd_slots(update, context)
        elif data == "quick_plan":
            await self.cmd_plan(update, context)
        elif data == "quick_tools":
            await self.cmd_tools(update, context)
        elif data == "quick_help":
            await self.cmd_help(update, context)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if self.is_debug_mode(user_id):
            await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        else:
            await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.add_to_conversation(user_id, "user", message_text)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Ollama –∏ MCP
            response = await self.process_with_ollama(user_id, message_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_conversation(user_id, "assistant", response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - —É–±–∏—Ä–∞–µ–º parse_mode –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            try:
                await update.message.reply_text(response, parse_mode='Markdown')
            except Exception as markdown_error:
                # –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                logger.warning(f"Markdown –æ—à–∏–±–∫–∞: {markdown_error}")
                await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    async def process_with_ollama(self, user_id: int, question: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Ollama —Å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
        debug_mode = self.is_debug_mode(user_id)
        
        if debug_mode:
            logger.info(f"üîß –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Ollama
        mcp_tools = await self.mcp_client.list_tools()
        ollama_tools = []
        for tool in mcp_tools:
            ollama_tool = {
                "type": "function",
                "function": {
                    "name": tool["name"],
                    "description": tool["description"],
                    "parameters": tool["inputSchema"]
                }
            }
            ollama_tools.append(ollama_tool)
        
        if debug_mode:
            tools_list = [tool['function']['name'] for tool in ollama_tools]
            logger.info(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(ollama_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {', '.join(tools_list)}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            {
                "role": "system", 
                "content": self.build_system_prompt()
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π)
        conversation = self.get_user_conversation(user_id)
        if conversation:
            messages.extend(conversation[-6:])
        
        if debug_mode:
            logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Ollama —Å tool calling...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Ollama
        response = self.ollama.chat_with_tools(messages, ollama_tools)
        
        if "error" in response:
            return f"‚ùå –û—à–∏–±–∫–∞ Ollama: {response['error']}"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        assistant_message = response["message"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tool calls
        if assistant_message.get("tool_calls"):
            return await self.handle_tool_calls_response(assistant_message, messages, ollama_tools, debug_mode)
        else:
            final_response = assistant_message.get("content", "")
            if debug_mode:
                logger.info("‚ÑπÔ∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–∑–≤–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
            return final_response
    
    async def handle_tool_calls_response(self, assistant_message: Dict, messages: List[Dict], ollama_tools: List[Dict], debug_mode: bool) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        tool_calls = assistant_message["tool_calls"]
        
        if debug_mode:
            tools_list = [tool_call["function"]["name"] for tool_call in tool_calls]
            logger.info(f"üîß –ú–æ–¥–µ–ª—å –≤—ã–∑–≤–∞–ª–∞ {len(tool_calls)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {', '.join(tools_list)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å tool calls
        messages.append({
            "role": "assistant",
            "content": assistant_message.get("content", ""),
            "tool_calls": tool_calls
        })
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π tool call
        for tool_call in tool_calls:
            function = tool_call["function"]
            tool_name = function["name"]
            tool_args = function["arguments"]
            
            try:
                if debug_mode:
                    logger.info(f"üìû –í—ã–ø–æ–ª–Ω—è—é {tool_name}...")
                
                result = await self.mcp_client.call_tool(tool_name, tool_args)
                tool_result = result["content"][0]["text"]
                
                if debug_mode:
                    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {tool_result[:100]}...")
                
                messages.append({
                    "role": "tool",
                    "content": tool_result
                })
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {e}"
                if debug_mode:
                    logger.error(f"‚ùå {error_msg}")
                
                messages.append({
                    "role": "tool", 
                    "content": error_msg
                })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ tool calls
        if debug_mode:
            logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–æ–¥–µ–ª—å...")
        
        final_response = self.ollama.chat_with_tools(messages, ollama_tools)
        
        if "error" in final_response:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {final_response['error']}"
            
        return final_response["message"].get("content", "")
    
    def build_system_prompt(self) -> str:
        """–°—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        return """You are a helpful corporate assistant. You have access to several tools that help you answer user questions.

AVAILABLE TOOLS: When you need data to answer a question, you MUST use the available tools. Never provide made-up information.

IMPORTANT: Always use the tools when they can provide the information needed to answer the user's question. Don't just describe the tools - actually use them.

Rules:
- If the user asks about time slots or schedule ‚Üí use get_available_slots
- If the user wants to schedule a meeting ‚Üí use schedule_meeting
- If the user asks about regulations or policies ‚Üí use search_regulations  
- If the user asks about development plans ‚Üí use get_development_plan

Always respond in Russian after using the tools. Format your response clearly with emojis, but avoid complex Markdown formatting that might break. Use simple formatting only.

Example: If user asks "–ü–æ–∫–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã", you should call get_available_slots tool, then provide the results in Russian with clear formatting."""
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(msg="Exception while handling an update:", exc_info=context.error)
        
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            )
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP
            if not await self.start_bot():
                return
            
            logger.info("üöÄ Telegram Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º async polling –≤–º–µ—Å—Ç–æ run_polling
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            try:
                await asyncio.Event().wait()
            except asyncio.CancelledError:
                pass
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            try:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await self.mcp_client.stop_server()
            logger.info("üõë Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export TELEGRAM_TOKEN='your_bot_token_here'")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = TelegramMCPBot(token)
    try:
        await bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == "__main__":
    asyncio.run(main()) 
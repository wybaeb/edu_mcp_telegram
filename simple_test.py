#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ JSON-RPC
"""

import json
import subprocess
import sys

def test_mcp_server():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîß –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 40)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    process = subprocess.Popen(
        ["python3", "mcp_server.py"],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        init_request = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {
                "protocolVersion": "2024-11-05",
                "capabilities": {},
                "clientInfo": {"name": "simple-test", "version": "1.0.0"}
            }
        }
        
        process.stdin.write(json.dumps(init_request) + "\n")
        process.stdin.flush()
        
        response = json.loads(process.stdout.readline())
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {response['result']['serverInfo']['name']}")
        
        # 2. –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("\n2Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        tools_request = {
            "jsonrpc": "2.0",
            "id": 2,
            "method": "tools/list"
        }
        
        process.stdin.write(json.dumps(tools_request) + "\n")
        process.stdin.flush()
        
        response = json.loads(process.stdout.readline())
        tools = response['result']['tools']
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
        for tool in tools:
            print(f"   üî® {tool['name']}: {tool['description']}")
        
        # 3. –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        print("\n3Ô∏è‚É£ –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ 'get_available_slots'...")
        call_request = {
            "jsonrpc": "2.0",
            "id": 3,
            "method": "tools/call",
            "params": {
                "name": "get_available_slots",
                "arguments": {}
            }
        }
        
        process.stdin.write(json.dumps(call_request) + "\n")
        process.stdin.flush()
        
        response = json.loads(process.stdout.readline())
        result = json.loads(response['result']['content'][0]['text'])
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(result['available_slots'])}")
        
        # 4. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        print("\n4Ô∏è‚É£ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏...")
        meeting_request = {
            "jsonrpc": "2.0",
            "id": 4,
            "method": "tools/call",
            "params": {
                "name": "schedule_meeting",
                "arguments": {
                    "date": "2024-01-19",
                    "time": "11:00",
                    "title": "–¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
                    "duration": 30
                }
            }
        }
        
        process.stdin.write(json.dumps(meeting_request) + "\n")
        process.stdin.flush()
        
        response = json.loads(process.stdout.readline())
        result = json.loads(response['result']['content'][0]['text'])
        if result['success']:
            print(f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {result['meeting_id']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        
    finally:
        process.terminate()
        process.wait()

if __name__ == "__main__":
    test_mcp_server() 
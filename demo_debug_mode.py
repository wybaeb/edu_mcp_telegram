#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ AI –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –æ –≤—ã–∑–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import asyncio
import json
from interactive_chat import InteractiveMCPChat


async def demo_debug_mode():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    print("üîç === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ñ–ò–ú–ê –û–¢–õ–ê–î–ö–ò MCP ===")
    print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ AI –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –æ –≤—ã–∑–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print()
    
    chat = InteractiveMCPChat()
    
    try:
        # –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
        await chat.mcp_client.start_server()
        await chat.mcp_client.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools = await chat.mcp_client.list_tools()
        print(f"‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏")
        print()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        print("üéØ –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò –í–ö–õ–Æ–ß–ï–ù")
        print("–¢–µ–ø–µ—Ä—å –º—ã –≤–∏–¥–∏–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π AI:")
        print()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        print("üìã –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ú–û–î–ï–õ–ò:")
        system_prompt = chat.build_system_prompt_with_tools([
            {"name": tool["name"], "description": tool["description"], "parameters": tool["inputSchema"]}
            for tool in tools
        ])
        print(system_prompt[:300] + "...")
        print()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –≤—ã–∑–æ–≤–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("ü§ñ –ü–†–ò–ú–ï–† –û–¢–í–ï–¢–ê –ú–û–î–ï–õ–ò –° –í–´–ó–û–í–ê–ú–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
        mock_response = """–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.

[TOOL_CALL:get_available_slots:{}]

–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã."""
        
        print(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {mock_response}")
        print()
        
        print("üîß –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê:")
        import re
        tool_pattern = r'\[TOOL_CALL:([^:]+):([^\]]+)\]'
        tool_calls = re.findall(tool_pattern, mock_response)
        
        if tool_calls:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(tool_calls)} –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
            for tool_name, params in tool_calls:
                print(f"  ‚Ä¢ {tool_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        
        print()
        print("‚ú® –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –†–ï–ñ–ò–ú–ê –û–¢–õ–ê–î–ö–ò:")
        print("1. üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å - —Å—Ç—É–¥–µ–Ω—Ç—ã –≤–∏–¥—è—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç MCP")
        print("2. üîç –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å - –ø–æ–Ω—è—Ç–Ω–æ –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI")
        print("3. üêõ –û—Ç–ª–∞–¥–∫–∞ - –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ")
        print("4. üìä –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–æ–≤")
        print()
        
        print("üí° –†–ï–ñ–ò–ú –ú–û–ñ–ù–û –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–¨ –ö–û–ú–ê–ù–î–û–ô /debug –í –ß–ê–¢–ï")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    finally:
        await chat.mcp_client.stop_server()


if __name__ == "__main__":
    asyncio.run(demo_debug_mode()) 
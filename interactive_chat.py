#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –º–æ–¥–µ–ª—å—é —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å LLM –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import json
import asyncio
import sys
import signal
import requests
from typing import Dict, Any, List, Optional
from test_client import MCPTestClient, OllamaIntegration


class InteractiveMCPChat:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º –∏ Ollama"""
    
    def __init__(self):
        self.mcp_client = MCPTestClient(["python3", "mcp_server.py"])
        self.ollama = OllamaIntegration()
        self.conversation_history = []
        self.available_tools = []
        self.running = True
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞"""
        print("ü§ñ === –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô CHAT –° MCP + OLLAMA ===")
        print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç!")
        print("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
        if not self.ollama.check_ollama_availability():
            print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve")
            print("–ò —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥–µ–ª—å mistral:latest –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ollama pull mistral:latest")
            return
        
        print("‚úÖ Ollama –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
        try:
            await self.mcp_client.start_server()
            await self.mcp_client.initialize()
            self.available_tools = await self.mcp_client.list_tools()
            print(f"‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å {len(self.available_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏")
            print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self.show_help()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á–∞—Ç–∞
            await self.chat_loop()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        finally:
            await self.mcp_client.stop_server()
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
        print("üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        print("  /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("  /tools - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        print("  /slots - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã")
        print("  /plan - –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è")
        print("  /meet <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É")
        print("  /search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º")
        print("  /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        print("  /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("  /exit –∏–ª–∏ /quit - –≤—ã—Ö–æ–¥")
        print()
        print("üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å - —è –æ—Ç–≤–µ—á—É –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        print("=" * 60)
        print()
    
    async def chat_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_input = input("üë§ –í—ã: ").strip()
                
                if not user_input:
                    continue
                    
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                if user_input.startswith('/'):
                    await self.handle_command(user_input)
                else:
                    # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                    await self.handle_question(user_input)
                    
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                self.running = False
            except EOFError:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                self.running = False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def handle_command(self, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–∞—Ç–∞"""
        parts = command[1:].split()
        cmd = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        if cmd in ['exit', 'quit']:
            self.running = False
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            
        elif cmd == 'help':
            self.show_help()
            
        elif cmd == 'tools':
            print("üîß –î–û–°–¢–£–ü–ù–´–ï MCP –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
            for i, tool in enumerate(self.available_tools, 1):
                print(f"{i}. {tool['name']}")
                print(f"   üìù {tool['description']}")
            print()
            
        elif cmd == 'slots':
            try:
                result = await self.mcp_client.call_tool("get_available_slots")
                data = json.loads(result["content"][0]["text"])
                print("üìÖ –î–û–°–¢–£–ü–ù–´–ï –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´:")
                for slot in data["available_slots"]:
                    print(f"   {slot['date']}: {', '.join(slot['available_times'])}")
                print()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤: {e}")
                
        elif cmd == 'plan':
            try:
                result = await self.mcp_client.call_tool("get_development_plan")
                data = json.loads(result["content"][0]["text"])
                print("üöÄ –ü–õ–ê–ù –†–ê–ó–í–ò–¢–ò–Ø:")
                print(f"   –¢–µ–∫—É—â–∏–π: {data['current_level']}")
                print(f"   –¶–µ–ª—å: {data['target_level']}")
                print("   –ù–∞–≤—ã–∫–∏:")
                for skill in data["skills_to_develop"]:
                    print(f"   ‚Ä¢ {skill['skill']} ({skill['current_level']} ‚Üí {skill['target_level']})")
                print()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
                
        elif cmd == 'meet':
            if len(args) < 3:
                print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /meet <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
                print("   –ü—Ä–∏–º–µ—Ä: /meet 2024-01-19 14:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π")
            else:
                date = args[0]
                time = args[1]
                title = " ".join(args[2:])
                try:
                    result = await self.mcp_client.call_tool("schedule_meeting", {
                        "date": date,
                        "time": time,
                        "title": title
                    })
                    data = json.loads(result["content"][0]["text"])
                    if data["success"]:
                        print(f"‚úÖ {data['message']}")
                    else:
                        print(f"‚ùå {data['message']}")
                        if data.get('available_alternatives'):
                            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(data['available_alternatives'])}")
                    print()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    
        elif cmd == 'search':
            if not args:
                print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>")
                print("   –ü—Ä–∏–º–µ—Ä: /search –æ—Ç–ø—É—Å–∫")
            else:
                query = " ".join(args)
                try:
                    result = await self.mcp_client.call_tool("search_regulations", {
                        "query": query
                    })
                    data = json.loads(result["content"][0]["text"])
                    if data.get('results'):
                        print(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ü–û '{query}':")
                        for res in data['results']:
                            print(f"‚ùì {res['question']}")
                            print(f"üí° {res['answer']}")
                            print()
                    else:
                        print(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –æ—Ç–ø—É—Å–∫, –±–æ–ª—å–Ω–∏—á–Ω—ã–π, –¥—Ä–µ—Å—Å-–∫–æ–¥, —É–¥–∞–ª–µ–Ω–∫–∞")
                        print()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                    
        elif cmd == 'history':
            print("üìú –ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê:")
            if not self.conversation_history:
                print("   –ü–æ–∫–∞ –ø—É—Å—Ç–æ")
            else:
                for i, msg in enumerate(self.conversation_history[-10:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    print(f"{i}. {msg['role']}: {msg['content'][:100]}...")
            print()
            
        elif cmd == 'clear':
            self.conversation_history.clear()
            print("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
            print()
            
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
            print("üí° –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            print()
    
    async def handle_question(self, question: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º MCP"""
        print("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            "role": "user",
            "content": question
        })
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –ª–∏ –Ω–∞–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MCP
            context_data = await self.gather_context_for_question(question)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
            system_context = self.build_system_context(context_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            conversation_context = self.build_conversation_context()
            full_prompt = f"{system_context}\n\n{conversation_context}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {question}\n\n–ü–æ–º–æ—â–Ω–∏–∫:"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Ollama
            response = self.ollama.query_ollama(full_prompt)
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
            print(f"ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {response}")
            print()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "assistant", 
                "content": response
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            print()
    
    async def gather_context_for_question(self, question: str) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ MCP –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
        context = {}
        question_lower = question.lower()
        
        try:
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –≤—Ä–µ–º—è, —Å–ª–æ—Ç—ã, –≤—Å—Ç—Ä–µ—á–∏
            if any(word in question_lower for word in ['–≤—Ä–µ–º—è', '—Å–ª–æ—Ç', '–≤—Å—Ç—Ä–µ—á–∞', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å', '—Å–≤–æ–±–æ–¥–Ω']):
                result = await self.mcp_client.call_tool("get_available_slots")
                context['calendar'] = json.loads(result["content"][0]["text"])
            
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Ä–∞–∑–≤–∏—Ç–∏–µ, –∫–∞—Ä—å–µ—Ä—É, –Ω–∞–≤—ã–∫–∏
            if any(word in question_lower for word in ['—Ä–∞–∑–≤–∏—Ç–∏–µ', '–∫–∞—Ä—å–µ—Ä', '–Ω–∞–≤—ã–∫', '–ø–ª–∞–Ω', '–æ–±—É—á–µ–Ω']):
                result = await self.mcp_client.call_tool("get_development_plan")
                context['development'] = json.loads(result["content"][0]["text"])
            
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã, –ø–æ–ª–∏—Ç–∏–∫–∏
            if any(word in question_lower for word in ['–ø—Ä–∞–≤–∏–ª', '—Ä–µ–≥–ª–∞–º–µ–Ω—Ç', '–ø–æ–ª–∏—Ç–∏–∫', '–æ—Ç–ø—É—Å–∫', '–±–æ–ª—å–Ω–∏—á–Ω', '–¥—Ä–µ—Å—Å']):
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã
                for keyword in ['–æ—Ç–ø—É—Å–∫', '–±–æ–ª—å–Ω–∏—á–Ω—ã–π', '–¥—Ä–µ—Å—Å-–∫–æ–¥', '—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–æ–±—É—á–µ–Ω–∏–µ']:
                    if keyword in question_lower:
                        result = await self.mcp_client.call_tool("search_regulations", {"query": keyword})
                        regulations_data = json.loads(result["content"][0]["text"])
                        if regulations_data.get('results'):
                            context['regulations'] = regulations_data
                            break
        
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        
        return context
    
    def build_system_context(self, context_data: Dict[str, Any]) -> str:
        """–°—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM"""
        context_parts = [
            "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏–∏:"
        ]
        
        if 'calendar' in context_data:
            calendar_info = "–ö–ê–õ–ï–ù–î–ê–†–¨:\n"
            for slot in context_data['calendar'].get('available_slots', []):
                calendar_info += f"- {slot['date']}: {', '.join(slot['available_times'])}\n"
            context_parts.append(calendar_info)
        
        if 'development' in context_data:
            dev_info = f"–ü–õ–ê–ù –†–ê–ó–í–ò–¢–ò–Ø:\n"
            dev_data = context_data['development']
            dev_info += f"- –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {dev_data['current_level']}\n"
            dev_info += f"- –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {dev_data['target_level']}\n"
            dev_info += "- –ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:\n"
            for skill in dev_data['skills_to_develop']:
                dev_info += f"  ‚Ä¢ {skill['skill']} ({skill['current_level']} ‚Üí {skill['target_level']}, –¥–µ–¥–ª–∞–π–Ω: {skill['deadline']})\n"
            context_parts.append(dev_info)
        
        if 'regulations' in context_data:
            reg_info = "–ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ï –†–ï–ì–õ–ê–ú–ï–ù–¢–´:\n"
            for result in context_data['regulations'].get('results', []):
                reg_info += f"- {result['question']}\n  {result['answer']}\n\n"
            context_parts.append(reg_info)
        
        context_parts.append("–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
        
        return "\n\n".join(context_parts)
    
    def build_conversation_context(self) -> str:
        """–°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not self.conversation_history:
            return ""
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recent_history = self.conversation_history[-6:]
        context_lines = []
        
        for msg in recent_history:
            role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == 'user' else "–ü–æ–º–æ—â–Ω–∏–∫"
            context_lines.append(f"{role}: {msg['content']}")
        
        return "\n–ü–†–ï–î–´–î–£–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢:\n" + "\n".join(context_lines)


def setup_signal_handler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    def signal_handler(sig, frame):
        print("\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_signal_handler()
    
    chat = InteractiveMCPChat()
    await chat.start()


if __name__ == "__main__":
    asyncio.run(main()) 
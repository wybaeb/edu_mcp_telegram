#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –º–æ–¥–µ–ª—å—é —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å LLM –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import json
import asyncio
import sys
import signal
import requests
from typing import Dict, Any, List, Optional
from test_client import MCPTestClient


class OllamaIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Ollama –¥–ª—è tool calling"""
    
    def __init__(self, base_url: str = "http://localhost:11434", model: str = "llama3.2:3b-instruct-q5_K_M"):
        self.base_url = base_url
        self.model = model
    
    def check_ollama_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def chat_with_tools(self, messages: List[Dict], tools: List[Dict]) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Ollama —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Ollama
            payload = {
                "model": self.model,
                "messages": messages,
                "stream": False
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if tools:
                payload["tools"] = tools
            
            response = requests.post(
                f"{self.base_url}/api/chat", 
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"HTTP {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"}


class InteractiveMCPChat:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º –∏ Ollama"""
    
    def __init__(self):
        self.mcp_client = MCPTestClient(["python3", "mcp_server.py"])
        self.ollama = OllamaIntegration()
        self.conversation_history = []
        self.available_tools = []
        self.running = True
        self.verbose_mode = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞"""
        print("ü§ñ === –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô CHAT –° MCP + OLLAMA ===")
        print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç!")
        print("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
        if not self.ollama.check_ollama_availability():
            print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve")
            print("–ò —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥–µ–ª—å llama3.2:3b-instruct-q5_K_M –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ollama pull llama3.2:3b-instruct-q5_K_M")
            return
        
        print("‚úÖ Ollama –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
        try:
            await self.mcp_client.start_server()
            await self.mcp_client.initialize()
            self.available_tools = await self.mcp_client.list_tools()
            print(f"‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å {len(self.available_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏")
            print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self.show_help()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á–∞—Ç–∞
            await self.chat_loop()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        finally:
            await self.mcp_client.stop_server()
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
        print("üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        print("  /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("  /tools - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        print("  /slots - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã")
        print("  /plan - –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è")
        print("  /meet <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É")
        print("  /search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º")
        print("  /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        print("  /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("  /debug - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ–∫–∞–∑ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)")
        print("  /exit –∏–ª–∏ /quit - –≤—ã—Ö–æ–¥")
        print()
        debug_status = "–í–ö–õ–Æ–ß–ï–ù" if self.verbose_mode else "–í–´–ö–õ–Æ–ß–ï–ù"
        print(f"üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {debug_status}")
        print("üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å - —è –æ—Ç–≤–µ—á—É –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        print("=" * 60)
        print()
    
    async def chat_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_input = input("üë§ –í—ã: ").strip()
                
                if not user_input:
                    continue
                    
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                if user_input.startswith('/'):
                    await self.handle_command(user_input)
                else:
                    # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                    await self.handle_question(user_input)
                    
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                self.running = False
            except EOFError:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                self.running = False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def handle_command(self, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–∞—Ç–∞"""
        parts = command[1:].split()
        cmd = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        if cmd in ['exit', 'quit']:
            self.running = False
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            
        elif cmd == 'help':
            self.show_help()
            
        elif cmd == 'tools':
            print("üîß –î–û–°–¢–£–ü–ù–´–ï MCP –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
            for i, tool in enumerate(self.available_tools, 1):
                print(f"{i}. {tool['name']}")
                print(f"   üìù {tool['description']}")
            print()
            
        elif cmd == 'slots':
            try:
                result = await self.mcp_client.call_tool("get_available_slots")
                data = json.loads(result["content"][0]["text"])
                print("üìÖ –î–û–°–¢–£–ü–ù–´–ï –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´:")
                for slot in data["available_slots"]:
                    print(f"   {slot['date']}: {', '.join(slot['available_times'])}")
                print()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤: {e}")
                
        elif cmd == 'plan':
            try:
                result = await self.mcp_client.call_tool("get_development_plan")
                data = json.loads(result["content"][0]["text"])
                print("üöÄ –ü–õ–ê–ù –†–ê–ó–í–ò–¢–ò–Ø:")
                print(f"   –¢–µ–∫—É—â–∏–π: {data['current_level']}")
                print(f"   –¶–µ–ª—å: {data['target_level']}")
                print("   –ù–∞–≤—ã–∫–∏:")
                for skill in data["skills_to_develop"]:
                    print(f"   ‚Ä¢ {skill['skill']} ({skill['current_level']} ‚Üí {skill['target_level']})")
                print()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
                
        elif cmd == 'meet':
            if len(args) < 3:
                print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /meet <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
                print("   –ü—Ä–∏–º–µ—Ä: /meet 2024-01-19 14:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π")
            else:
                date = args[0]
                time = args[1]
                title = " ".join(args[2:])
                try:
                    result = await self.mcp_client.call_tool("schedule_meeting", {
                        "date": date,
                        "time": time,
                        "title": title
                    })
                    data = json.loads(result["content"][0]["text"])
                    if data["success"]:
                        print(f"‚úÖ {data['message']}")
                    else:
                        print(f"‚ùå {data['message']}")
                        if data.get('available_alternatives'):
                            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(data['available_alternatives'])}")
                    print()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    
        elif cmd == 'search':
            if not args:
                print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>")
                print("   –ü—Ä–∏–º–µ—Ä: /search –æ—Ç–ø—É—Å–∫")
            else:
                query = " ".join(args)
                try:
                    result = await self.mcp_client.call_tool("search_regulations", {
                        "query": query
                    })
                    data = json.loads(result["content"][0]["text"])
                    if data.get('results'):
                        print(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ü–û '{query}':")
                        for res in data['results']:
                            print(f"‚ùì {res['question']}")
                            print(f"üí° {res['answer']}")
                            print()
                    else:
                        print(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –æ—Ç–ø—É—Å–∫, –±–æ–ª—å–Ω–∏—á–Ω—ã–π, –¥—Ä–µ—Å—Å-–∫–æ–¥, —É–¥–∞–ª–µ–Ω–∫–∞")
                        print()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                    
        elif cmd == 'history':
            print("üìú –ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê:")
            if not self.conversation_history:
                print("   –ü–æ–∫–∞ –ø—É—Å—Ç–æ")
            else:
                for i, msg in enumerate(self.conversation_history[-10:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    print(f"{i}. {msg['role']}: {msg['content'][:100]}...")
            print()
            
        elif cmd == 'clear':
            self.conversation_history.clear()
            print("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
            print()
            
        elif cmd == 'debug':
            self.verbose_mode = not self.verbose_mode
            status = "–í–ö–õ–Æ–ß–ï–ù" if self.verbose_mode else "–í–´–ö–õ–Æ–ß–ï–ù"
            print(f"üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {status}")
            if self.verbose_mode:
                print("   –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∫–∞–∫–∏–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI")
            else:
                print("   –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞")
            print()
            
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
            print("üí° –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            print()
    
    async def handle_question(self, question: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º MCP"""
        if self.verbose_mode:
            print("üîç === –ê–ù–ê–õ–ò–ó –í–û–ü–†–û–°–ê ===")
            print(f"üìù –í–æ–ø—Ä–æ—Å: {question}")
        else:
            print("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            "role": "user",
            "content": question
        })
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if self.verbose_mode:
                print("üîß –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
            
            mcp_tools = await self.mcp_client.list_tools()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Ollama
            ollama_tools = []
            for tool in mcp_tools:
                ollama_tool = {
                    "type": "function",
                    "function": {
                        "name": tool["name"],
                        "description": tool["description"],
                        "parameters": tool["inputSchema"]
                    }
                }
                ollama_tools.append(ollama_tool)
            
            if self.verbose_mode:
                print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(ollama_tools)} MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç Ollama:")
                for tool in ollama_tools:
                    print(f"   ‚Ä¢ {tool['function']['name']}: {tool['function']['description']}")
                print()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Ollama
            messages = [
                {
                    "role": "system", 
                    "content": self.build_system_prompt()
                }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π)
            if self.conversation_history:
                messages.extend(self.conversation_history[-6:])
            
            if self.verbose_mode:
                print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Ollama —Å tool calling...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Ollama
            response = self.ollama.chat_with_tools(messages, ollama_tools)
            
            if "error" in response:
                print(f"‚ùå –û—à–∏–±–∫–∞ Ollama: {response['error']}")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            assistant_message = response["message"]
            
            if self.verbose_mode:
                print("üì§ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Ollama")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tool calls
            if assistant_message.get("tool_calls"):
                await self.handle_tool_calls(assistant_message, messages, ollama_tools)
            else:
                # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
                final_response = assistant_message.get("content", "")
                
                if self.verbose_mode:
                    print("‚ÑπÔ∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–∑–≤–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
                    print("=" * 60)
                    
                print(f"ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {final_response}")
                print()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.conversation_history.append({
                    "role": "assistant", 
                    "content": final_response
                })
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            print()

    async def handle_tool_calls(self, assistant_message: Dict, messages: List[Dict], ollama_tools: List[Dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        tool_calls = assistant_message["tool_calls"]
        
        if self.verbose_mode:
            print(f"üîß –ú–æ–¥–µ–ª—å –≤—ã–∑–≤–∞–ª–∞ {len(tool_calls)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
            for i, tool_call in enumerate(tool_calls, 1):
                func = tool_call["function"]
                print(f"   {i}. {func['name']} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {func['arguments']}")
            print()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å tool calls –≤ –∏—Å—Ç–æ—Ä–∏—é
        messages.append({
            "role": "assistant",
            "content": assistant_message.get("content", ""),
            "tool_calls": tool_calls
        })
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π tool call
        for tool_call in tool_calls:
            function = tool_call["function"]
            tool_name = function["name"]
            tool_args = function["arguments"]
            
            try:
                if self.verbose_mode:
                    print(f"   üìû –í—ã–ø–æ–ª–Ω—è—é {tool_name}...")
                
                # –í—ã–∑—ã–≤–∞–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                result = await self.mcp_client.call_tool(tool_name, tool_args)
                tool_result = result["content"][0]["text"]
                
                if self.verbose_mode:
                    print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {tool_result[:100]}...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç tool call
                messages.append({
                    "role": "tool",
                    "content": tool_result
                })
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {e}"
                if self.verbose_mode:
                    print(f"   ‚ùå {error_msg}")
                
                messages.append({
                    "role": "tool", 
                    "content": error_msg
                })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ tool calls
        if self.verbose_mode:
            print("\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–æ–¥–µ–ª—å...")
        
        final_response = self.ollama.chat_with_tools(messages, ollama_tools)
        
        if "error" in final_response:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {final_response['error']}")
            return
            
        final_content = final_response["message"].get("content", "")
        
        if self.verbose_mode:
            print("=" * 60)
            
        print(f"ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {final_content}")
        print()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            "role": "assistant",
            "content": final_content
        })

    def build_system_prompt(self) -> str:
        """–°—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        return """You are a helpful corporate assistant. You have access to several tools that help you answer user questions.

AVAILABLE TOOLS: When you need data to answer a question, you MUST use the available tools. Never provide made-up information.

IMPORTANT: Always use the tools when they can provide the information needed to answer the user's question. Don't just describe the tools - actually use them.

Rules:
- If the user asks about time slots or schedule ‚Üí use get_available_slots
- If the user wants to schedule a meeting ‚Üí use schedule_meeting
- If the user asks about regulations or policies ‚Üí use search_regulations  
- If the user asks about development plans ‚Üí use get_development_plan

Always respond in Russian after using the tools.

Example: If user asks "–ü–æ–∫–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã", you should call get_available_slots tool, then provide the results in Russian."""


def setup_signal_handler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    def signal_handler(sig, frame):
        print("\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_signal_handler()
    
    chat = InteractiveMCPChat()
    await chat.start()


if __name__ == "__main__":
    asyncio.run(main()) 
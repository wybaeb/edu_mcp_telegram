#!/usr/bin/env python3
"""
Educational MCP Server for Students using FastMCP
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π MCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö —Ü–µ–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ FastMCP
"""

import json
import asyncio
from typing import Dict, List, Any, Optional
from datetime import datetime

from mcp.server.fastmcp import FastMCP
from mock_data import (
    get_available_slots_for_week, book_meeting, get_development_plan, 
    search_corporate_regulations, AVAILABLE_SLOTS
)

# Create the FastMCP server
mcp = FastMCP("Educational MCP Server")

# === TOOLS ===

@mcp.tool()
def list_tools() -> str:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    tools_info = [
        {
            "name": "list_tools",
            "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
            "parameters": []
        },
        {
            "name": "get_available_slots",
            "description": "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é",
            "parameters": []
        },
        {
            "name": "schedule_meeting",
            "description": "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è",
            "parameters": ["date", "time", "title", "duration"]
        },
        {
            "name": "get_development_plan",
            "description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
            "parameters": []
        },
        {
            "name": "search_regulations",
            "description": "–ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º",
            "parameters": ["query"]
        }
    ]
    
    return json.dumps({
        "available_tools": tools_info,
        "total_count": len(tools_info),
        "description": "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞"
    }, ensure_ascii=False, indent=2)


@mcp.tool()
def get_available_slots() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"""
    slots = get_available_slots_for_week()
    
    formatted_slots = []
    for date, times in slots.items():
        if times:  # –¢–æ–ª—å–∫–æ –¥–Ω–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
            formatted_slots.append({
                "date": date,
                "available_times": times,
                "day_of_week": datetime.strptime(date, "%Y-%m-%d").strftime("%A")
            })
    
    return json.dumps({
        "available_slots": formatted_slots,
        "note": "–í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ —É–∫–∞–∑–∞–Ω—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ",
        "booking_instruction": "–î–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 'schedule_meeting'"
    }, ensure_ascii=False, indent=2)


@mcp.tool()
def schedule_meeting(date: str, time: str, title: str, duration: int = 60) -> str:
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    
    Args:
        date: –î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        time: –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        title: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        duration: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
    """
    result = book_meeting(date, time, title, duration)
    return json.dumps(result, ensure_ascii=False, indent=2)


@mcp.tool()
def get_development_plan() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏"""
    from mock_data import get_development_plan as get_plan_data
    plan = get_plan_data()
    return json.dumps(plan, ensure_ascii=False, indent=2)


@mcp.tool()
def search_regulations(query: str) -> str:
    """–ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º
    """
    if not query:
        return json.dumps({
            "error": "–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
        }, ensure_ascii=False, indent=2)
    
    results = search_corporate_regulations(query)
    
    if not results:
        return json.dumps({
            "message": "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            "suggestion": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –æ—Ç–ø—É—Å–∫, –±–æ–ª—å–Ω–∏—á–Ω—ã–π, –¥—Ä–µ—Å—Å-–∫–æ–¥, —É–¥–∞–ª–µ–Ω–∫–∞, –æ–±—É—á–µ–Ω–∏–µ, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
        }, ensure_ascii=False, indent=2)
    
    return json.dumps({
        "search_query": query,
        "results": results,
        "found_count": len(results)
    }, ensure_ascii=False, indent=2)


# === RESOURCES ===

@mcp.resource("company://calendar/slots")
def available_time_slots() -> str:
    """–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á"""
    return json.dumps(get_available_slots_for_week(), ensure_ascii=False, indent=2)


@mcp.resource("company://development/plan")
def development_plan() -> str:
    """–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è"""
    return json.dumps(get_development_plan(), ensure_ascii=False, indent=2)


@mcp.resource("company://regulations/all")
def corporate_regulations() -> str:
    """–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –∏ –ø–æ–ª–∏—Ç–∏–∫–∏"""
    return json.dumps({"regulations": search_corporate_regulations("")}, ensure_ascii=False, indent=2)


# === PROMPTS ===

@mcp.prompt()
def career_advice(current_role: str, goal: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é
    
    Args:
        current_role: –¢–µ–∫—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        goal: –ö–∞—Ä—å–µ—Ä–Ω–∞—è —Ü–µ–ª—å
    """
    return f"""–¢—ã –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–æ–º–æ–≥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{current_role}' –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ '{goal}'.

–Ø —Ä–∞–±–æ—Ç–∞—é {current_role} –∏ —Ö–æ—á—É {goal}. –ö–∞–∫–∏–µ —à–∞–≥–∏ –º–Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å?

–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –Ω–∞–≤—ã–∫–∞–º –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º
- –û–±—É—á–∞—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º
- –í—Ä–µ–º–µ–Ω–Ω—ã–º —Ä–∞–º–∫–∞–º"""


@mcp.prompt()
def meeting_agenda(meeting_type: str, participants: str = "–∫–æ–º–∞–Ω–¥–∞") -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–≤–µ—Å—Ç–∫—É –¥–Ω—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
    
    Args:
        meeting_type: –¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏
        participants: –£—á–∞—Å—Ç–Ω–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    return f"""–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –ø–æ–≤–µ—Å—Ç–∫—É –¥–Ω—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ —Ç–∏–ø–∞ '{meeting_type}' —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: {participants}.

–í–∫–ª—é—á–∏ —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
- –¶–µ–ª—å –≤—Å—Ç—Ä–µ—á–∏
- –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
- –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- Action items –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ

–§–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏: {meeting_type}
–£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants}"""


# Make the server executable
if __name__ == "__main__":
    import sys
    import logging
    
    # Configure logging to stderr
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        stream=sys.stderr
    )
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ Educational MCP Server started with FastMCP!")
    logger.info("üìö –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    logger.info("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    logger.info("   - list_tools: –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
    logger.info("   - get_available_slots: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é")
    logger.info("   - schedule_meeting: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è")
    logger.info("   - get_development_plan: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏")
    logger.info("   - search_regulations: –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º")
    logger.info("")
    
    try:
        mcp.run()
    except KeyboardInterrupt:
        logger.info("üëã Educational MCP Server stopped")
    except Exception as e:
        logger.error(f"‚ùå Server error: {e}")
        sys.exit(1) 
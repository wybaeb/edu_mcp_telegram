#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã Educational MCP Server
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Ollama –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LLM
"""

import json
import subprocess
import sys
import asyncio
import requests
from typing import Dict, Any, List


class MCPTestClient:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self, server_command: List[str]):
        self.server_process = None
        self.server_command = server_command
        self.request_id = 0
        
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        self.server_process = await asyncio.create_subprocess_exec(
            *self.server_command,
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        print("‚úÖ MCP Server –∑–∞–ø—É—â–µ–Ω")
        
    async def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.server_process:
            self.server_process.terminate()
            await self.server_process.wait()
            print("üõë MCP Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def send_request(self, method: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON-RPC –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        self.request_id += 1
        request = {
            "jsonrpc": "2.0",
            "id": self.request_id,
            "method": method,
            "params": params or {}
        }
        
        request_data = json.dumps(request) + "\n"
        self.server_process.stdin.write(request_data.encode())
        await self.server_process.stdin.drain()
        
        response_data = await self.server_process.stdout.readline()
        return json.loads(response_data.decode())
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
        response = await self.send_request("initialize", {
            "protocolVersion": "2024-11-05",
            "capabilities": {},
            "clientInfo": {
                "name": "educational-test-client",
                "version": "1.0.0"
            }
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ None)
        if "error" in response and response["error"] is not None:
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {response['error']}")
        
        if "result" not in response:
            raise Exception(f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {response}")
            
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return response["result"]
    
    async def list_tools(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        response = await self.send_request("tools/list")
        return response["result"]["tools"]
    
    async def call_tool(self, name: str, arguments: Dict[str, Any] = None):
        """–í—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        response = await self.send_request("tools/call", {
            "name": name,
            "arguments": arguments or {}
        })
        return response["result"]


class OllamaIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ollama –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ LLM –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    def __init__(self, model: str = "mistral:latest", base_url: str = "http://localhost:11434"):
        self.model = model
        self.base_url = base_url
    
    def check_ollama_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def query_ollama(self, prompt: str, context: str = "") -> str:
        """–ó–∞–ø—Ä–æ—Å –∫ Ollama"""
        try:
            full_prompt = f"{context}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {prompt}\n–û—Ç–≤–µ—Ç:" if context else prompt
            
            response = requests.post(
                f"{self.base_url}/api/generate",
                json={
                    "model": self.model,
                    "prompt": full_prompt,
                    "stream": False
                },
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()["response"]
            else:
                return f"–û—à–∏–±–∫–∞ Ollama: {response.status_code}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {str(e)}"


async def demonstrate_mcp_functionality():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üéì === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EDUCATIONAL MCP SERVER ===")
    print()
    
    # –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
    client = MCPTestClient(["python3", "mcp_server.py"])
    
    try:
        await client.start_server()
        await client.initialize()
        
        print("üìã 1. –°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
        print("=" * 50)
        
        tools = await client.list_tools()
        for i, tool in enumerate(tools, 1):
            print(f"{i}. {tool['name']}")
            print(f"   üìù {tool['description']}")
            print()
        
        print("üïê 2. –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–´–• –°–õ–û–¢–û–í:")
        print("=" * 50)
        
        slots_result = await client.call_tool("get_available_slots")
        slots_data = json.loads(slots_result["content"][0]["text"])
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:")
        for slot in slots_data["available_slots"]:
            print(f"üìÖ {slot['date']} ({slot['day_of_week']}): {', '.join(slot['available_times'])}")
        print()
        
        print("üìù 3. –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –í–°–¢–†–ï–ß–ò:")
        print("=" * 50)
        
        meeting_result = await client.call_tool("schedule_meeting", {
            "date": "2024-01-17",
            "time": "10:00", 
            "title": "–î–µ–º–æ –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "duration": 60
        })
        meeting_data = json.loads(meeting_result["content"][0]["text"])
        if meeting_data["success"]:
            print(f"‚úÖ {meeting_data['message']}")
            print(f"üÜî ID –≤—Å—Ç—Ä–µ—á–∏: {meeting_data['meeting_id']}")
        else:
            print(f"‚ùå {meeting_data['message']}")
        print()
        
        print("üöÄ 4. –ü–õ–ê–ù –†–ê–ó–í–ò–¢–ò–Ø:")
        print("=" * 50)
        
        plan_result = await client.call_tool("get_development_plan")
        plan_data = json.loads(plan_result["content"][0]["text"])
        print(f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {plan_data['current_level']}")
        print(f"–¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {plan_data['target_level']}")
        print("\n–ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:")
        for skill in plan_data["skills_to_develop"]:
            print(f"‚Ä¢ {skill['skill']} ({skill['current_level']} ‚Üí {skill['target_level']})")
            print(f"  –î–µ–¥–ª–∞–π–Ω: {skill['deadline']}")
        print()
        
        print("üìã 5. –ü–û–ò–°–ö –ü–û –†–ï–ì–õ–ê–ú–ï–ù–¢–ê–ú:")
        print("=" * 50)
        
        regulations_result = await client.call_tool("search_regulations", {
            "query": "–æ—Ç–ø—É—Å–∫"
        })
        regulations_data = json.loads(regulations_result["content"][0]["text"])
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {regulations_data['found_count']}")
        for result in regulations_data["results"]:
            print(f"‚ùì {result['question']}")
            print(f"üí° {result['answer']}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
    finally:
        await client.stop_server()


async def demonstrate_ollama_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ollama"""
    print("\nü§ñ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° OLLAMA ===")
    print()
    
    ollama = OllamaIntegration()
    
    if not ollama.check_ollama_availability():
        print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("   1. Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
        print("   2. –ú–æ–¥–µ–ª—å mistral:latest –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print("   3. –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:11434")
        print("\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
        print("   curl -fsSL https://ollama.ai/install.sh | sh")
        print("   ollama pull mistral:latest")
        print("   ollama serve")
        return
    
    print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω!")
    
    # –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MCP –¥–∞–Ω–Ω—ã—Ö —Å LLM
    client = MCPTestClient(["python3", "mcp_server.py"])
    
    try:
        await client.start_server()
        await client.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –∏–∑ MCP
        plan_result = await client.call_tool("get_development_plan")
        plan_data = json.loads(plan_result["content"][0]["text"])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        context = f"""
–¢—ã –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:
- –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {plan_data['current_level']}
- –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {plan_data['target_level']}
- –ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è: {', '.join([skill['skill'] for skill in plan_data['skills_to_develop']])}

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
        
        print("üß† –ó–∞–ø—Ä–æ—Å –∫ LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ MCP:")
        query = "–ö–∞–∫–æ–π –Ω–∞–≤—ã–∫ –º–Ω–µ —Å—Ç–æ–∏—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?"
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {query}")
        
        response = ollama.query_ollama(query, context)
        print(f"ü§ñ –û—Ç–≤–µ—Ç Ollama: {response}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        
    finally:
        await client.stop_server()


def create_demo_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ"""
    demo_script = """#!/bin/bash
echo "üéì Educational MCP Server Demo"
echo "=============================="
echo

echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
python3 -c "import asyncio, json, requests; print('‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')" || {
    echo "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    source venv/bin/activate
    pip install -r requirements.txt
}

echo
echo "–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏..."
source venv/bin/activate
python3 test_client.py
"""
    
    with open("demo.sh", "w") as f:
        f.write(demo_script)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    import os
    os.chmod("demo.sh", 0o755)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç demo.sh –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ Educational MCP Server - Test Client")
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    print()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MCP
    await demonstrate_mcp_functionality()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ollama
    await demonstrate_ollama_integration()
    
    print("\n‚ú® === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===")
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã —É–≤–∏–¥–µ–ª–∏:")
    print("‚úÖ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç MCP –ø—Ä–æ—Ç–æ–∫–æ–ª")
    print("‚úÖ –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
    print("‚úÖ –†–∞–±–æ—Ç—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏")
    print("‚úÖ –ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è –∫–∞—Ä—å–µ—Ä—ã")
    print("‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º")
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å LLM (Ollama)")
    print()
    print("üìö –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: –∏–∑—É—á–∏—Ç–µ –∫–æ–¥ –≤ —Ñ–∞–π–ª–∞—Ö:")
    print("   - mcp_server.py (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä)")
    print("   - mcp_types.py (—Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö)")
    print("   - mock_data.py (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    print("   - test_client.py (—ç—Ç–æ—Ç —Ñ–∞–π–ª)")


if __name__ == "__main__":
    create_demo_script()
    asyncio.run(main()) 
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ tool calling –≤ Ollama
"""

import asyncio
import json
from interactive_chat import InteractiveMCPChat, OllamaIntegration
from test_client import MCPTestClient


async def test_standard_tool_calling():
    """–¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ tool calling"""
    print("üß™ === –¢–ï–°–¢ –°–¢–ê–ù–î–ê–†–¢–ù–û–ì–û TOOL CALLING ===")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    mcp_client = MCPTestClient(["python3", "mcp_server.py"])
    ollama = OllamaIntegration()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
    if not ollama.check_ollama_availability():
        print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve")
        return
    
    print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
        await mcp_client.start_server()
        await mcp_client.initialize()
        print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        mcp_tools = await mcp_client.list_tools()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(mcp_tools)} MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Ollama
        ollama_tools = []
        for tool in mcp_tools:
            ollama_tool = {
                "type": "function", 
                "function": {
                    "name": tool["name"],
                    "description": tool["description"],
                    "parameters": tool["inputSchema"]
                }
            }
            ollama_tools.append(ollama_tool)
        
        print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç Ollama")
        print()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        test_cases = [
            "–ü–æ–∫–∞–∂–∏ –º–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã",
            "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 13:00 –ø–æ —Ç–µ–º–µ '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'",
            "–ù–∞–π–¥–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –ø—Ä–æ –æ—Ç–ø—É—Å–∫"
        ]
        
        for i, question in enumerate(test_cases, 1):
            print(f"üìù –¢–ï–°–¢ {i}: {question}")
            print("-" * 50)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = [
                {
                    "role": "system",
                    "content": """–¢—ã –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
                },
                {
                    "role": "user", 
                    "content": question
                }
            ]
            
            print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
            
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ Ollama
            response = ollama.chat_with_tools(messages, ollama_tools)
            
            if "error" in response:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response['error']}")
                continue
                
            assistant_message = response["message"]
            print(f"üì§ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º tool calls
            if assistant_message.get("tool_calls"):
                tool_calls = assistant_message["tool_calls"]
                print(f"üîß –ú–æ–¥–µ–ª—å –≤—ã–∑–≤–∞–ª–∞ {len(tool_calls)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                messages.append({
                    "role": "assistant",
                    "content": assistant_message.get("content", ""),
                    "tool_calls": tool_calls
                })
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º tool calls
                for tool_call in tool_calls:
                    function = tool_call["function"]
                    tool_name = function["name"]
                    tool_args = function["arguments"]
                    
                    print(f"   üìû {tool_name}({tool_args})")
                    
                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                        result = await mcp_client.call_tool(tool_name, tool_args)
                        tool_result = result["content"][0]["text"]
                        
                        print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {tool_result[:100]}...")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        messages.append({
                            "role": "tool",
                            "content": tool_result
                        })
                        
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {e}"
                        print(f"   ‚ùå {error_msg}")
                        
                        messages.append({
                            "role": "tool",
                            "content": error_msg
                        })
                
                # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–æ–¥–µ–ª—å...")
                
                final_response = ollama.chat_with_tools(messages, ollama_tools)
                
                if "error" in final_response:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {final_response['error']}")
                else:
                    final_content = final_response["message"].get("content", "")
                    print(f"üí¨ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢: {final_content}")
                    
            else:
                # –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–∑–≤–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                content = assistant_message.get("content", "")
                print(f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–∑–≤–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
                print(f"üí¨ –û–¢–í–ï–¢: {content}")
            
            print()
            print("=" * 60)
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await mcp_client.stop_server()


if __name__ == "__main__":
    asyncio.run(test_standard_tool_calling()) 
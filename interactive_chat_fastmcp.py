#!/usr/bin/env python3
"""
Interactive Chat Client for Educational MCP Server using FastMCP
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ MCP-—Å–µ—Ä–≤–µ—Ä–∞ —Å FastMCP
"""

import asyncio
import json
import sys
import requests
from typing import Dict, Any, Optional, List
from datetime import datetime

from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from mcp.types import AnyUrl


class OllamaIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Ollama –¥–ª—è tool calling"""
    
    def __init__(self, base_url: str = "http://localhost:11434", model: str = "llama3.2:3b-instruct-q5_K_M"):
        self.base_url = base_url
        self.model = model
    
    def check_ollama_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def chat_with_tools(self, messages: List[Dict], tools: List[Dict]) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Ollama —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Ollama
            payload = {
                "model": self.model,
                "messages": messages,
                "stream": False
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if tools:
                payload["tools"] = tools
            
            response = requests.post(
                f"{self.base_url}/api/chat", 
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"HTTP {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"}


class InteractiveMCPChat:
    """Interactive chat interface for MCP server"""
    
    def __init__(self):
        self.server_params = StdioServerParameters(
            command="uv",
            args=["run", "python", "mcp_server_fastmcp.py"],
            env=None
        )
        self.session = None
        self.read_stream = None
        self.write_stream = None
        self.user_state = {}
        self.ollama = OllamaIntegration()
        self.conversation_history = []
        self.available_tools = []
        self.natural_language_mode = False
        self.verbose_mode = True
    
    def safe_json_parse(self, text):
        """Safely parse JSON string"""
        try:
            return json.loads(text)
        except json.JSONDecodeError:
            return {"raw_text": text}
    
    def format_json_output(self, data, title="–†–µ–∑—É–ª—å—Ç–∞—Ç"):
        """Format JSON data for better display"""
        if isinstance(data, str):
            try:
                data = json.loads(data)
            except:
                return f"{title}:\n{data}"
        
        formatted = json.dumps(data, indent=2, ensure_ascii=False)
        return f"\n{title}:\n{'='*50}\n{formatted}\n{'='*50}"
    
    async def connect_to_server(self):
        """Connect to MCP server"""
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É...")
        try:
            self.stdio_client = stdio_client(self.server_params)
            self.read_stream, self.write_stream = await self.stdio_client.__aenter__()
            self.session = ClientSession(self.read_stream, self.write_stream)
            await self.session.__aenter__()
            await self.session.initialize()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è Ollama
            tools = await self.session.list_tools()
            self.available_tools = []
            for tool in tools.tools:
                tool_dict = {
                    "name": tool.name,
                    "description": tool.description,
                    "inputSchema": tool.inputSchema if hasattr(tool, 'inputSchema') else {}
                }
                self.available_tools.append(tool_dict)
            
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MCP —Å–µ—Ä–≤–µ—Ä—É!")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def disconnect_from_server(self):
        """Disconnect from MCP server"""
        try:
            if self.session:
                await self.session.__aexit__(None, None, None)
            if hasattr(self, 'stdio_client'):
                await self.stdio_client.__aexit__(None, None, None)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}")
    
    def show_welcome(self):
        """Show welcome message"""
        print("""
üéì Educational MCP Interactive Chat with Natural Language
========================================================

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–∞ FastMCP!

–†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:
  ü§ñ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ (—Å Ollama) - –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã
  üíª –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä—è–º—ã–µ MCP –∫–æ–º–∞–Ω–¥—ã

–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  /nlp        - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  /cmd        - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º  
  /debug      - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
  help        - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
  status      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  clear       - –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
  quit/exit   - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã

–í –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ:
  tools       - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã  
  resources   - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
  prompts     - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
  call <tool> [args...]     - –í—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
  read <uri>                - –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ—Å—É—Ä—Å
  prompt <name> [args...]   - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç

–í —Ä–µ–∂–∏–º–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞:
  - –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã: "–ü–æ–∫–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã"
  - "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –ø–æ –ø—Ä–æ–µ–∫—Ç—É"
  - "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –æ—Ç–ø—É—Å–∫"
  - "–ö–∞–∫–æ–π —É –º–µ–Ω—è –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è?"

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:
        """)
    
    def parse_command(self, command_line: str):
        """Parse command line into command and arguments"""
        parts = command_line.strip().split()
        if not parts:
            return None, []
        
        command = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        return command, args
    
    async def handle_natural_language_question(self, question: str):
        """Handle natural language question with Ollama"""
        if self.verbose_mode:
            print("üîç === –ê–ù–ê–õ–ò–ó –í–û–ü–†–û–°–ê ===")
            print(f"üìù –í–æ–ø—Ä–æ—Å: {question}")
        else:
            print("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            "role": "user",
            "content": question
        })
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Ollama
            if self.verbose_mode:
                print("üîß –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
            
            ollama_tools = []
            for tool in self.available_tools:
                ollama_tool = {
                    "type": "function",
                    "function": {
                        "name": tool["name"],
                        "description": tool["description"],
                        "parameters": tool["inputSchema"]
                    }
                }
                ollama_tools.append(ollama_tool)
            
            if self.verbose_mode:
                print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(ollama_tools)} MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç Ollama:")
                for tool in ollama_tools:
                    print(f"   ‚Ä¢ {tool['function']['name']}: {tool['function']['description']}")
                print()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Ollama
            messages = [
                {
                    "role": "system", 
                    "content": self.build_system_prompt()
                }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π)
            if self.conversation_history:
                messages.extend(self.conversation_history[-6:])
            
            if self.verbose_mode:
                print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Ollama —Å tool calling...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Ollama
            response = self.ollama.chat_with_tools(messages, ollama_tools)
            
            if "error" in response:
                print(f"‚ùå –û—à–∏–±–∫–∞ Ollama: {response['error']}")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            assistant_message = response["message"]
            
            if self.verbose_mode:
                print("üì§ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Ollama")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tool calls
            if assistant_message.get("tool_calls"):
                await self.handle_tool_calls(assistant_message, messages, ollama_tools)
            else:
                # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
                final_response = assistant_message.get("content", "")
                
                if self.verbose_mode:
                    print("‚ÑπÔ∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–∑–≤–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
                    print("=" * 60)
                    
                print(f"ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {final_response}")
                print()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.conversation_history.append({
                    "role": "assistant", 
                    "content": final_response
                })
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            print()

    async def handle_tool_calls(self, assistant_message: Dict, messages: List[Dict], ollama_tools: List[Dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        tool_calls = assistant_message["tool_calls"]
        
        if self.verbose_mode:
            print(f"üîß –ú–æ–¥–µ–ª—å –≤—ã–∑–≤–∞–ª–∞ {len(tool_calls)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
            for i, tool_call in enumerate(tool_calls, 1):
                func = tool_call["function"]
                print(f"   {i}. {func['name']} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {func['arguments']}")
            print()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å tool calls –≤ –∏—Å—Ç–æ—Ä–∏—é
        messages.append({
            "role": "assistant",
            "content": assistant_message.get("content", ""),
            "tool_calls": tool_calls
        })
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π tool call
        for tool_call in tool_calls:
            function = tool_call["function"]
            tool_name = function["name"]
            tool_args = function["arguments"]
            
            try:
                if self.verbose_mode:
                    print(f"   üìû –í—ã–ø–æ–ª–Ω—è—é {tool_name}...")
                
                # –í—ã–∑—ã–≤–∞–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                result = await self.session.call_tool(tool_name, tool_args)
                tool_result = result.content[0].text
                
                if self.verbose_mode:
                    print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {tool_result[:100]}...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç tool call
                messages.append({
                    "role": "tool",
                    "content": tool_result
                })
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {e}"
                if self.verbose_mode:
                    print(f"   ‚ùå {error_msg}")
                
                messages.append({
                    "role": "tool", 
                    "content": error_msg
                })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ tool calls
        if self.verbose_mode:
            print("\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–æ–¥–µ–ª—å...")
        
        final_response = self.ollama.chat_with_tools(messages, ollama_tools)
        
        if "error" in final_response:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {final_response['error']}")
            return
            
        final_content = final_response["message"].get("content", "")
        
        if self.verbose_mode:
            print("=" * 60)
            
        print(f"ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {final_content}")
        print()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            "role": "assistant",
            "content": final_content
        })

    def build_system_prompt(self) -> str:
        """–°—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        return """You are a helpful corporate assistant. You have access to several tools that help you answer user questions.

AVAILABLE TOOLS: When you need data to answer a question, you MUST use the available tools. Never provide made-up information.

IMPORTANT: Always use the tools when they can provide the information needed to answer the user's question. Don't just describe the tools - actually use them.

Rules:
- If the user asks about time slots or schedule ‚Üí use get_available_slots
- If the user wants to schedule a meeting ‚Üí use schedule_meeting
- If the user asks about regulations or policies ‚Üí use search_regulations  
- If the user asks about development plans ‚Üí use get_development_plan

Always respond in Russian after using the tools.

Example: If user asks "–ü–æ–∫–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã", you should call get_available_slots tool, then provide the results in Russian."""

    async def handle_tools_command(self, args):
        """Handle tools command"""
        try:
            tools = await self.session.list_tools()
            print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ({len(tools.tools)}):")
            print("=" * 60)
            for tool in tools.tools:
                print(f"üîß {tool.name}")
                print(f"   üìù {tool.description}")
                if hasattr(tool, 'inputSchema') and tool.inputSchema and 'properties' in tool.inputSchema:
                    params = list(tool.inputSchema['properties'].keys())
                    if params:
                        print(f"   üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(params)}")
                print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
    
    async def handle_resources_command(self, args):
        """Handle resources command"""
        try:
            resources = await self.session.list_resources()
            print(f"\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã ({len(resources.resources)}):")
            print("=" * 60)
            for resource in resources.resources:
                print(f"üìÑ {resource.uri}")
                print(f"   üìù {resource.name}")
                if hasattr(resource, 'description') and resource.description:
                    print(f"   üìã {resource.description}")
                print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    async def handle_prompts_command(self, args):
        """Handle prompts command"""
        try:
            prompts = await self.session.list_prompts()
            print(f"\nüí≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã ({len(prompts.prompts)}):")
            print("=" * 60)
            for prompt in prompts.prompts:
                print(f"üéØ {prompt.name}")
                print(f"   üìù {prompt.description}")
                if hasattr(prompt, 'arguments') and prompt.arguments:
                    args_str = ", ".join([f"{arg.name}{'*' if arg.required else ''}" for arg in prompt.arguments])
                    print(f"   üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args_str} (* - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)")
                print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
    
    async def handle_call_command(self, args):
        """Handle call command"""
        if not args:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. –ü—Ä–∏–º–µ—Ä: call list_tools")
            return
        
        tool_name = args[0]
        tool_args = {}
        
        # Parse arguments for specific tools
        if tool_name == "search_regulations" and len(args) > 1:
            tool_args["query"] = " ".join(args[1:])
        elif tool_name == "schedule_meeting":
            if len(args) >= 4:
                tool_args = {
                    "date": args[1],
                    "time": args[2], 
                    "title": " ".join(args[3:])
                }
            else:
                print("‚ùå –î–ª—è schedule_meeting –Ω—É–∂–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã: date time title")
                print("   –ü—Ä–∏–º–µ—Ä: call schedule_meeting 2024-01-15 14:00 –ü–ª–∞–Ω—ë—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
                return
        
        try:
            print(f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {tool_name}...")
            result = await self.session.call_tool(tool_name, tool_args)
            
            if result.content and len(result.content) > 0:
                parsed = self.safe_json_parse(result.content[0].text)
                print(self.format_json_output(parsed, f"–†–µ–∑—É–ª—å—Ç–∞—Ç {tool_name}"))
            else:
                print("‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, –Ω–æ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
    
    async def handle_read_command(self, args):
        """Handle read command"""
        if not args:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ URI —Ä–µ—Å—É—Ä—Å–∞. –ü—Ä–∏–º–µ—Ä: read company://calendar/slots")
            return
        
        uri = args[0]
        try:
            print(f"‚è≥ –ß–∏—Ç–∞–µ—Ç—Å—è —Ä–µ—Å—É—Ä—Å {uri}...")
            resource_content = await self.session.read_resource(AnyUrl(uri))
            
            if resource_content.contents and len(resource_content.contents) > 0:
                parsed = self.safe_json_parse(resource_content.contents[0].text)
                print(self.format_json_output(parsed, f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ—Å—É—Ä—Å–∞ {uri}"))
            else:
                print("‚ö†Ô∏è –†–µ—Å—É—Ä—Å –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ {uri}: {e}")
    
    async def handle_prompt_command(self, args):
        """Handle prompt command"""
        if not args:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞. –ü—Ä–∏–º–µ—Ä: prompt career_advice")
            return
        
        prompt_name = args[0]
        prompt_args = {}
        
        # Parse arguments for specific prompts
        if prompt_name == "career_advice" and len(args) >= 3:
            prompt_args = {
                "current_role": args[1],
                "goal": " ".join(args[2:])
            }
        elif prompt_name == "meeting_agenda" and len(args) >= 2:
            prompt_args = {
                "meeting_type": args[1],
                "participants": " ".join(args[2:]) if len(args) > 2 else "–∫–æ–º–∞–Ω–¥–∞"
            }
        elif prompt_name in ["career_advice", "meeting_agenda"]:
            # Interactive mode for prompts
            if prompt_name == "career_advice":
                current_role = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ")
                goal = input("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—å–µ—Ä–Ω—É—é —Ü–µ–ª—å: ")
                prompt_args = {"current_role": current_role, "goal": goal}
            elif prompt_name == "meeting_agenda":
                meeting_type = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏: ")
                participants = input("–í–≤–µ–¥–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (Enter –¥–ª—è '–∫–æ–º–∞–Ω–¥–∞'): ") or "–∫–æ–º–∞–Ω–¥–∞"
                prompt_args = {"meeting_type": meeting_type, "participants": participants}
        
        try:
            print(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç {prompt_name}...")
            prompt = await self.session.get_prompt(prompt_name, prompt_args)
            
            if prompt.messages:
                print(f"\nüí≠ –ü—Ä–æ–º–ø—Ç '{prompt_name}':")
                print("=" * 60)
                for i, message in enumerate(prompt.messages, 1):
                    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ {i} ({message.role}):")
                    print(f"{message.content.text}")
                    print("-" * 40)
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ {prompt_name}: {e}")
    
    def handle_status_command(self):
        """Handle status command"""
        status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if self.session else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        mode = "ü§ñ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫" if self.natural_language_mode else "üíª –ö–æ–º–∞–Ω–¥–Ω—ã–π"
        debug = "‚úÖ –í–∫–ª—é—á–µ–Ω" if self.verbose_mode else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        ollama_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if self.ollama.check_ollama_availability() else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   üîó MCP —Å–µ—Ä–≤–µ—Ä: {status}")
        print(f"   üéØ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode}")
        print(f"   üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {debug}")
        print(f"   ü§ñ Ollama: {ollama_status}")
        if self.session:
            print(f"   üìö –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(self.available_tools)}")
            print(f"   üí¨ –ò—Å—Ç–æ—Ä–∏—è: {len(self.conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            print(f"   üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    def handle_clear_command(self):
        """Handle clear command"""
        import os
        os.system('clear' if os.name == 'posix' else 'cls')
        self.conversation_history.clear()
        print("üßπ –≠–∫—Ä–∞–Ω –∏ –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω—ã")
    
    def show_help(self):
        """Show help message"""
        mode_info = "ü§ñ –ï–°–¢–ï–°–¢–í–ï–ù–ù–´–ô –Ø–ó–´–ö (—Ç–µ–∫—É—â–∏–π)" if self.natural_language_mode else "üíª –ö–û–ú–ê–ù–î–ù–´–ô –†–ï–ñ–ò–ú (—Ç–µ–∫—É—â–∏–π)"
        
        print(f"""
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ MCP Interactive Chat
==================================
{mode_info}

üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í:
  /nlp                            - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  /cmd                            - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º
  /debug                          - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ ({self.verbose_mode})

ü§ñ –í –†–ï–ñ–ò–ú–ï –ï–°–¢–ï–°–¢–í–ï–ù–ù–û–ì–û –Ø–ó–´–ö–ê:
  - –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
  - "–ü–æ–∫–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
  - "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –ø–æ –ø—Ä–æ–µ–∫—Ç—É X"
  - "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –æ—Ç–ø—É—Å–∫ –≤ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö"
  - "–ö–∞–∫–æ–π —É –º–µ–Ω—è –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è?"

üíª –í –ö–û–ú–ê–ù–î–ù–û–ú –†–ï–ñ–ò–ú–ï:
  tools                           - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  call list_tools                 - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  call get_available_slots        - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
  call get_development_plan       - –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è
  call search_regulations <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º
  call schedule_meeting <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É
  
  –ü—Ä–∏–º–µ—Ä—ã:
    call search_regulations –æ—Ç–ø—É—Å–∫
    call schedule_meeting 2024-01-15 14:00 –ü–ª–∞–Ω—ë—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã

üìö –†–ï–°–£–†–°–´ (Resources):
  resources                       - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  read company://calendar/slots   - –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
  read company://development/plan - –ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è
  read company://regulations/all  - –í—Å–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã

üí≠ –ü–†–û–ú–ü–¢–´ (Prompts):
  prompts                         - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
  prompt career_advice            - –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
  prompt meeting_agenda           - –ü–æ–≤–µ—Å—Ç–∫–∞ –≤—Å—Ç—Ä–µ—á–∏ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)

‚öôÔ∏è –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´:
  status                          - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  clear                           - –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω –∏ –∏—Å—Ç–æ—Ä–∏—é
  help                            - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  quit / exit                     - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã

üí° –°–û–í–ï–¢–´:
‚Ä¢ –í –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è Ollama (ollama serve)
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
‚Ä¢ –í –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        """)
    
    async def run_interactive_loop(self):
        """Run the main interactive loop"""
        while True:
            try:
                mode_indicator = "ü§ñ" if self.natural_language_mode else "üíª"
                command_line = input(f"\n{mode_indicator} > ").strip()
                
                if not command_line:
                    continue
                
                # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ
                if command_line.startswith('/'):
                    command = command_line[1:].lower()
                    if command in ['quit', 'exit']:
                        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    elif command == 'nlp':
                        if not self.ollama.check_ollama_availability():
                            print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve")
                            print("–ò —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥–µ–ª—å llama3.2:3b-instruct-q5_K_M –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ollama pull llama3.2:3b-instruct-q5_K_M")
                        else:
                            self.natural_language_mode = True
                            print("ü§ñ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞")
                            print("üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—ã—á–Ω—ã–º —è–∑—ã–∫–æ–º!")
                    elif command == 'cmd':
                        self.natural_language_mode = False
                        print("üíª –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º")
                        print("üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: tools, call, read, prompt")
                    elif command == 'debug':
                        self.verbose_mode = not self.verbose_mode
                        status = "–í–ö–õ–Æ–ß–ï–ù" if self.verbose_mode else "–í–´–ö–õ–Æ–ß–ï–ù"
                        print(f"üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {status}")
                    else:
                        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /{command}")
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if self.natural_language_mode:
                    # –†–µ–∂–∏–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
                    if not self.ollama.check_ollama_availability():
                        print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞!")
                        print("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º: /cmd")
                        continue
                    await self.handle_natural_language_question(command_line)
                else:
                    # –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º
                    command, args = self.parse_command(command_line)
                    
                    if command == 'help':
                        self.show_help()
                    elif command == 'status':
                        self.handle_status_command()
                    elif command == 'clear':
                        self.handle_clear_command()
                    elif command == 'tools':
                        await self.handle_tools_command(args)
                    elif command == 'resources':
                        await self.handle_resources_command(args)
                    elif command == 'prompts':
                        await self.handle_prompts_command(args)
                    elif command == 'call':
                        await self.handle_call_command(args)
                    elif command == 'read':
                        await self.handle_read_command(args)
                    elif command == 'prompt':
                        await self.handle_prompt_command(args)
                    else:
                        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                        print("üí° –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ '/nlp' –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞")
                    
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –ø–æ Ctrl+C")
                break
            except EOFError:
                print("\nüëã –í—ã—Ö–æ–¥ –ø–æ EOF")
                break
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    async def run(self):
        """Run the interactive chat"""
        self.show_welcome()
        
        if not await self.connect_to_server():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        if self.ollama.check_ollama_availability():
            print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (/nlp)")
            self.natural_language_mode = True
        else:
            print("‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ (/cmd)")
            print("üí° –î–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve")
            self.natural_language_mode = False
        
        try:
            await self.run_interactive_loop()
        finally:
            await self.disconnect_from_server()


async def main():
    """Main function"""
    chat = InteractiveMCPChat()
    await chat.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 